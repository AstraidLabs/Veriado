// <auto-generated/>
#pragma warning disable
#nullable enable
namespace Veriado.WinUI.ViewModels.Import
{
    /// <inheritdoc/>
    partial class ImportPageViewModel
    {
        /// <inheritdoc cref="_selectedFolder"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public string? SelectedFolder
        {
            get => _selectedFolder;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(_selectedFolder, value))
                {
                    OnSelectedFolderChanging(value);
                    OnSelectedFolderChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.SelectedFolder);
                    _selectedFolder = value;
                    OnSelectedFolderChanged(value);
                    OnSelectedFolderChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.SelectedFolder);
                }
            }
        }

        /// <inheritdoc cref="_recursive"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool Recursive
        {
            get => _recursive;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(_recursive, value))
                {
                    OnRecursiveChanging(value);
                    OnRecursiveChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.Recursive);
                    _recursive = value;
                    OnRecursiveChanged(value);
                    OnRecursiveChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.Recursive);
                }
            }
        }

        /// <inheritdoc cref="_keepFsMetadata"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool KeepFsMetadata
        {
            get => _keepFsMetadata;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(_keepFsMetadata, value))
                {
                    OnKeepFsMetadataChanging(value);
                    OnKeepFsMetadataChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.KeepFsMetadata);
                    _keepFsMetadata = value;
                    OnKeepFsMetadataChanged(value);
                    OnKeepFsMetadataChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.KeepFsMetadata);
                }
            }
        }

        /// <inheritdoc cref="_setReadOnly"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool SetReadOnly
        {
            get => _setReadOnly;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(_setReadOnly, value))
                {
                    OnSetReadOnlyChanging(value);
                    OnSetReadOnlyChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.SetReadOnly);
                    _setReadOnly = value;
                    OnSetReadOnlyChanged(value);
                    OnSetReadOnlyChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.SetReadOnly);
                }
            }
        }

        /// <inheritdoc cref="_useParallel"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool UseParallel
        {
            get => _useParallel;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(_useParallel, value))
                {
                    OnUseParallelChanging(value);
                    OnUseParallelChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.UseParallel);
                    _useParallel = value;
                    OnUseParallelChanged(value);
                    OnUseParallelChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.UseParallel);
                }
            }
        }

        /// <inheritdoc cref="_maxDegreeOfParallelism"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public int? MaxDegreeOfParallelism
        {
            get => _maxDegreeOfParallelism;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<int?>.Default.Equals(_maxDegreeOfParallelism, value))
                {
                    OnMaxDegreeOfParallelismChanging(value);
                    OnMaxDegreeOfParallelismChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.MaxDegreeOfParallelism);
                    _maxDegreeOfParallelism = value;
                    OnMaxDegreeOfParallelismChanged(value);
                    OnMaxDegreeOfParallelismChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.MaxDegreeOfParallelism);
                }
            }
        }

        /// <inheritdoc cref="_defaultAuthor"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public string? DefaultAuthor
        {
            get => _defaultAuthor;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(_defaultAuthor, value))
                {
                    OnDefaultAuthorChanging(value);
                    OnDefaultAuthorChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.DefaultAuthor);
                    _defaultAuthor = value;
                    OnDefaultAuthorChanged(value);
                    OnDefaultAuthorChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.DefaultAuthor);
                }
            }
        }

        /// <inheritdoc cref="_maxFileSizeMegabytes"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public double? MaxFileSizeMegabytes
        {
            get => _maxFileSizeMegabytes;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<double?>.Default.Equals(_maxFileSizeMegabytes, value))
                {
                    OnMaxFileSizeMegabytesChanging(value);
                    OnMaxFileSizeMegabytesChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.MaxFileSizeMegabytes);
                    _maxFileSizeMegabytes = value;
                    OnMaxFileSizeMegabytesChanged(value);
                    OnMaxFileSizeMegabytesChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.MaxFileSizeMegabytes);
                }
            }
        }

        /// <inheritdoc cref="_isImporting"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool IsImporting
        {
            get => _isImporting;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(_isImporting, value))
                {
                    OnIsImportingChanging(value);
                    OnIsImportingChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.IsImporting);
                    _isImporting = value;
                    OnIsImportingChanged(value);
                    OnIsImportingChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.IsImporting);
                }
            }
        }

        /// <inheritdoc cref="_isIndeterminate"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool IsIndeterminate
        {
            get => _isIndeterminate;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(_isIndeterminate, value))
                {
                    OnIsIndeterminateChanging(value);
                    OnIsIndeterminateChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.IsIndeterminate);
                    _isIndeterminate = value;
                    OnIsIndeterminateChanged(value);
                    OnIsIndeterminateChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.IsIndeterminate);
                }
            }
        }

        /// <inheritdoc cref="_processed"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public int Processed
        {
            get => _processed;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(_processed, value))
                {
                    OnProcessedChanging(value);
                    OnProcessedChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.Processed);
                    _processed = value;
                    OnProcessedChanged(value);
                    OnProcessedChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.Processed);
                }
            }
        }

        /// <inheritdoc cref="_total"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public int Total
        {
            get => _total;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(_total, value))
                {
                    OnTotalChanging(value);
                    OnTotalChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.Total);
                    _total = value;
                    OnTotalChanged(value);
                    OnTotalChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.Total);
                }
            }
        }

        /// <inheritdoc cref="_processedBytes"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public long ProcessedBytes
        {
            get => _processedBytes;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<long>.Default.Equals(_processedBytes, value))
                {
                    OnProcessedBytesChanging(value);
                    OnProcessedBytesChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.ProcessedBytes);
                    _processedBytes = value;
                    OnProcessedBytesChanged(value);
                    OnProcessedBytesChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.ProcessedBytes);
                }
            }
        }

        /// <inheritdoc cref="_totalBytes"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public long TotalBytes
        {
            get => _totalBytes;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<long>.Default.Equals(_totalBytes, value))
                {
                    OnTotalBytesChanging(value);
                    OnTotalBytesChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.TotalBytes);
                    _totalBytes = value;
                    OnTotalBytesChanged(value);
                    OnTotalBytesChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.TotalBytes);
                }
            }
        }

        /// <inheritdoc cref="_progressPercent"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public double? ProgressPercent
        {
            get => _progressPercent;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<double?>.Default.Equals(_progressPercent, value))
                {
                    OnProgressPercentChanging(value);
                    OnProgressPercentChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.ProgressPercent);
                    _progressPercent = value;
                    OnProgressPercentChanged(value);
                    OnProgressPercentChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.ProgressPercent);
                }
            }
        }

        /// <inheritdoc cref="_currentFileName"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public string? CurrentFileName
        {
            get => _currentFileName;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(_currentFileName, value))
                {
                    OnCurrentFileNameChanging(value);
                    OnCurrentFileNameChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.CurrentFileName);
                    _currentFileName = value;
                    OnCurrentFileNameChanged(value);
                    OnCurrentFileNameChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.CurrentFileName);
                }
            }
        }

        /// <inheritdoc cref="_currentFilePath"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public string? CurrentFilePath
        {
            get => _currentFilePath;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(_currentFilePath, value))
                {
                    OnCurrentFilePathChanging(value);
                    OnCurrentFilePathChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.CurrentFilePath);
                    _currentFilePath = value;
                    OnCurrentFilePathChanged(value);
                    OnCurrentFilePathChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.CurrentFilePath);
                }
            }
        }

        /// <inheritdoc cref="_hasMaxFileSizeError"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool HasMaxFileSizeError
        {
            get => _hasMaxFileSizeError;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(_hasMaxFileSizeError, value))
                {
                    OnHasMaxFileSizeErrorChanging(value);
                    OnHasMaxFileSizeErrorChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.HasMaxFileSizeError);
                    _hasMaxFileSizeError = value;
                    OnHasMaxFileSizeErrorChanged(value);
                    OnHasMaxFileSizeErrorChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.HasMaxFileSizeError);
                }
            }
        }

        /// <inheritdoc cref="_hasParallelismError"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool HasParallelismError
        {
            get => _hasParallelismError;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(_hasParallelismError, value))
                {
                    OnHasParallelismErrorChanging(value);
                    OnHasParallelismErrorChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.HasParallelismError);
                    _hasParallelismError = value;
                    OnHasParallelismErrorChanged(value);
                    OnHasParallelismErrorChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.HasParallelismError);
                }
            }
        }

        /// <inheritdoc cref="_isActiveStatusVisible"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool IsActiveStatusVisible
        {
            get => _isActiveStatusVisible;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(_isActiveStatusVisible, value))
                {
                    OnIsActiveStatusVisibleChanging(value);
                    OnIsActiveStatusVisibleChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.IsActiveStatusVisible);
                    _isActiveStatusVisible = value;
                    OnIsActiveStatusVisibleChanged(value);
                    OnIsActiveStatusVisibleChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.IsActiveStatusVisible);
                }
            }
        }

        /// <inheritdoc cref="_activeStatusTitle"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public string? ActiveStatusTitle
        {
            get => _activeStatusTitle;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(_activeStatusTitle, value))
                {
                    OnActiveStatusTitleChanging(value);
                    OnActiveStatusTitleChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.ActiveStatusTitle);
                    _activeStatusTitle = value;
                    OnActiveStatusTitleChanged(value);
                    OnActiveStatusTitleChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.ActiveStatusTitle);
                }
            }
        }

        /// <inheritdoc cref="_activeStatusMessage"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public string? ActiveStatusMessage
        {
            get => _activeStatusMessage;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(_activeStatusMessage, value))
                {
                    OnActiveStatusMessageChanging(value);
                    OnActiveStatusMessageChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.ActiveStatusMessage);
                    _activeStatusMessage = value;
                    OnActiveStatusMessageChanged(value);
                    OnActiveStatusMessageChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.ActiveStatusMessage);
                }
            }
        }

        /// <inheritdoc cref="_activeStatusSeverity"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public global::Microsoft.UI.Xaml.Controls.InfoBarSeverity ActiveStatusSeverity
        {
            get => _activeStatusSeverity;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<global::Microsoft.UI.Xaml.Controls.InfoBarSeverity>.Default.Equals(_activeStatusSeverity, value))
                {
                    OnActiveStatusSeverityChanging(value);
                    OnActiveStatusSeverityChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.ActiveStatusSeverity);
                    _activeStatusSeverity = value;
                    OnActiveStatusSeverityChanged(value);
                    OnActiveStatusSeverityChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.ActiveStatusSeverity);
                }
            }
        }

        /// <inheritdoc cref="_isDynamicStatusVisible"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool IsDynamicStatusVisible
        {
            get => _isDynamicStatusVisible;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(_isDynamicStatusVisible, value))
                {
                    OnIsDynamicStatusVisibleChanging(value);
                    OnIsDynamicStatusVisibleChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.IsDynamicStatusVisible);
                    _isDynamicStatusVisible = value;
                    OnIsDynamicStatusVisibleChanged(value);
                    OnIsDynamicStatusVisibleChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.IsDynamicStatusVisible);
                }
            }
        }

        /// <inheritdoc cref="_dynamicStatusTitle"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public string? DynamicStatusTitle
        {
            get => _dynamicStatusTitle;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(_dynamicStatusTitle, value))
                {
                    OnDynamicStatusTitleChanging(value);
                    OnDynamicStatusTitleChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.DynamicStatusTitle);
                    _dynamicStatusTitle = value;
                    OnDynamicStatusTitleChanged(value);
                    OnDynamicStatusTitleChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.DynamicStatusTitle);
                }
            }
        }

        /// <inheritdoc cref="_dynamicStatusMessage"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public string? DynamicStatusMessage
        {
            get => _dynamicStatusMessage;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(_dynamicStatusMessage, value))
                {
                    OnDynamicStatusMessageChanging(value);
                    OnDynamicStatusMessageChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.DynamicStatusMessage);
                    _dynamicStatusMessage = value;
                    OnDynamicStatusMessageChanged(value);
                    OnDynamicStatusMessageChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.DynamicStatusMessage);
                }
            }
        }

        /// <inheritdoc cref="_dynamicStatusSeverity"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public global::Microsoft.UI.Xaml.Controls.InfoBarSeverity DynamicStatusSeverity
        {
            get => _dynamicStatusSeverity;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<global::Microsoft.UI.Xaml.Controls.InfoBarSeverity>.Default.Equals(_dynamicStatusSeverity, value))
                {
                    OnDynamicStatusSeverityChanging(value);
                    OnDynamicStatusSeverityChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.DynamicStatusSeverity);
                    _dynamicStatusSeverity = value;
                    OnDynamicStatusSeverityChanged(value);
                    OnDynamicStatusSeverityChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.DynamicStatusSeverity);
                }
            }
        }

        /// <inheritdoc cref="_selectedErrorFilter"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public global::Veriado.WinUI.Models.Import.ImportErrorSeverity SelectedErrorFilter
        {
            get => _selectedErrorFilter;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<global::Veriado.WinUI.Models.Import.ImportErrorSeverity>.Default.Equals(_selectedErrorFilter, value))
                {
                    OnSelectedErrorFilterChanging(value);
                    OnSelectedErrorFilterChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.SelectedErrorFilter);
                    _selectedErrorFilter = value;
                    OnSelectedErrorFilterChanged(value);
                    OnSelectedErrorFilterChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.SelectedErrorFilter);
                }
            }
        }

        /// <summary>Executes the logic for when <see cref="SelectedFolder"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="SelectedFolder"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnSelectedFolderChanging(string? value);
        /// <summary>Executes the logic for when <see cref="SelectedFolder"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="SelectedFolder"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnSelectedFolderChanging(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="SelectedFolder"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="SelectedFolder"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnSelectedFolderChanged(string? value);
        /// <summary>Executes the logic for when <see cref="SelectedFolder"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="SelectedFolder"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnSelectedFolderChanged(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="Recursive"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="Recursive"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnRecursiveChanging(bool value);
        /// <summary>Executes the logic for when <see cref="Recursive"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="Recursive"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnRecursiveChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="Recursive"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="Recursive"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnRecursiveChanged(bool value);
        /// <summary>Executes the logic for when <see cref="Recursive"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="Recursive"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnRecursiveChanged(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="KeepFsMetadata"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="KeepFsMetadata"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnKeepFsMetadataChanging(bool value);
        /// <summary>Executes the logic for when <see cref="KeepFsMetadata"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="KeepFsMetadata"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnKeepFsMetadataChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="KeepFsMetadata"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="KeepFsMetadata"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnKeepFsMetadataChanged(bool value);
        /// <summary>Executes the logic for when <see cref="KeepFsMetadata"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="KeepFsMetadata"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnKeepFsMetadataChanged(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="SetReadOnly"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="SetReadOnly"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnSetReadOnlyChanging(bool value);
        /// <summary>Executes the logic for when <see cref="SetReadOnly"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="SetReadOnly"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnSetReadOnlyChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="SetReadOnly"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="SetReadOnly"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnSetReadOnlyChanged(bool value);
        /// <summary>Executes the logic for when <see cref="SetReadOnly"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="SetReadOnly"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnSetReadOnlyChanged(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="UseParallel"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="UseParallel"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnUseParallelChanging(bool value);
        /// <summary>Executes the logic for when <see cref="UseParallel"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="UseParallel"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnUseParallelChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="UseParallel"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="UseParallel"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnUseParallelChanged(bool value);
        /// <summary>Executes the logic for when <see cref="UseParallel"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="UseParallel"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnUseParallelChanged(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="MaxDegreeOfParallelism"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="MaxDegreeOfParallelism"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnMaxDegreeOfParallelismChanging(int? value);
        /// <summary>Executes the logic for when <see cref="MaxDegreeOfParallelism"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="MaxDegreeOfParallelism"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnMaxDegreeOfParallelismChanging(int? oldValue, int? newValue);
        /// <summary>Executes the logic for when <see cref="MaxDegreeOfParallelism"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="MaxDegreeOfParallelism"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnMaxDegreeOfParallelismChanged(int? value);
        /// <summary>Executes the logic for when <see cref="MaxDegreeOfParallelism"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="MaxDegreeOfParallelism"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnMaxDegreeOfParallelismChanged(int? oldValue, int? newValue);
        /// <summary>Executes the logic for when <see cref="DefaultAuthor"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="DefaultAuthor"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnDefaultAuthorChanging(string? value);
        /// <summary>Executes the logic for when <see cref="DefaultAuthor"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="DefaultAuthor"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnDefaultAuthorChanging(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="DefaultAuthor"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="DefaultAuthor"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnDefaultAuthorChanged(string? value);
        /// <summary>Executes the logic for when <see cref="DefaultAuthor"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="DefaultAuthor"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnDefaultAuthorChanged(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="MaxFileSizeMegabytes"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="MaxFileSizeMegabytes"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnMaxFileSizeMegabytesChanging(double? value);
        /// <summary>Executes the logic for when <see cref="MaxFileSizeMegabytes"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="MaxFileSizeMegabytes"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnMaxFileSizeMegabytesChanging(double? oldValue, double? newValue);
        /// <summary>Executes the logic for when <see cref="MaxFileSizeMegabytes"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="MaxFileSizeMegabytes"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnMaxFileSizeMegabytesChanged(double? value);
        /// <summary>Executes the logic for when <see cref="MaxFileSizeMegabytes"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="MaxFileSizeMegabytes"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnMaxFileSizeMegabytesChanged(double? oldValue, double? newValue);
        /// <summary>Executes the logic for when <see cref="IsImporting"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="IsImporting"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnIsImportingChanging(bool value);
        /// <summary>Executes the logic for when <see cref="IsImporting"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="IsImporting"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnIsImportingChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="IsImporting"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="IsImporting"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnIsImportingChanged(bool value);
        /// <summary>Executes the logic for when <see cref="IsImporting"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="IsImporting"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnIsImportingChanged(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="IsIndeterminate"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="IsIndeterminate"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnIsIndeterminateChanging(bool value);
        /// <summary>Executes the logic for when <see cref="IsIndeterminate"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="IsIndeterminate"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnIsIndeterminateChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="IsIndeterminate"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="IsIndeterminate"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnIsIndeterminateChanged(bool value);
        /// <summary>Executes the logic for when <see cref="IsIndeterminate"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="IsIndeterminate"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnIsIndeterminateChanged(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="Processed"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="Processed"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnProcessedChanging(int value);
        /// <summary>Executes the logic for when <see cref="Processed"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="Processed"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnProcessedChanging(int oldValue, int newValue);
        /// <summary>Executes the logic for when <see cref="Processed"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="Processed"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnProcessedChanged(int value);
        /// <summary>Executes the logic for when <see cref="Processed"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="Processed"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnProcessedChanged(int oldValue, int newValue);
        /// <summary>Executes the logic for when <see cref="Total"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="Total"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnTotalChanging(int value);
        /// <summary>Executes the logic for when <see cref="Total"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="Total"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnTotalChanging(int oldValue, int newValue);
        /// <summary>Executes the logic for when <see cref="Total"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="Total"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnTotalChanged(int value);
        /// <summary>Executes the logic for when <see cref="Total"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="Total"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnTotalChanged(int oldValue, int newValue);
        /// <summary>Executes the logic for when <see cref="ProcessedBytes"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ProcessedBytes"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnProcessedBytesChanging(long value);
        /// <summary>Executes the logic for when <see cref="ProcessedBytes"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ProcessedBytes"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnProcessedBytesChanging(long oldValue, long newValue);
        /// <summary>Executes the logic for when <see cref="ProcessedBytes"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ProcessedBytes"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnProcessedBytesChanged(long value);
        /// <summary>Executes the logic for when <see cref="ProcessedBytes"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ProcessedBytes"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnProcessedBytesChanged(long oldValue, long newValue);
        /// <summary>Executes the logic for when <see cref="TotalBytes"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="TotalBytes"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnTotalBytesChanging(long value);
        /// <summary>Executes the logic for when <see cref="TotalBytes"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="TotalBytes"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnTotalBytesChanging(long oldValue, long newValue);
        /// <summary>Executes the logic for when <see cref="TotalBytes"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="TotalBytes"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnTotalBytesChanged(long value);
        /// <summary>Executes the logic for when <see cref="TotalBytes"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="TotalBytes"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnTotalBytesChanged(long oldValue, long newValue);
        /// <summary>Executes the logic for when <see cref="ProgressPercent"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ProgressPercent"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnProgressPercentChanging(double? value);
        /// <summary>Executes the logic for when <see cref="ProgressPercent"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ProgressPercent"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnProgressPercentChanging(double? oldValue, double? newValue);
        /// <summary>Executes the logic for when <see cref="ProgressPercent"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ProgressPercent"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnProgressPercentChanged(double? value);
        /// <summary>Executes the logic for when <see cref="ProgressPercent"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ProgressPercent"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnProgressPercentChanged(double? oldValue, double? newValue);
        /// <summary>Executes the logic for when <see cref="CurrentFileName"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="CurrentFileName"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnCurrentFileNameChanging(string? value);
        /// <summary>Executes the logic for when <see cref="CurrentFileName"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="CurrentFileName"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnCurrentFileNameChanging(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="CurrentFileName"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="CurrentFileName"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnCurrentFileNameChanged(string? value);
        /// <summary>Executes the logic for when <see cref="CurrentFileName"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="CurrentFileName"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnCurrentFileNameChanged(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="CurrentFilePath"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="CurrentFilePath"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnCurrentFilePathChanging(string? value);
        /// <summary>Executes the logic for when <see cref="CurrentFilePath"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="CurrentFilePath"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnCurrentFilePathChanging(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="CurrentFilePath"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="CurrentFilePath"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnCurrentFilePathChanged(string? value);
        /// <summary>Executes the logic for when <see cref="CurrentFilePath"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="CurrentFilePath"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnCurrentFilePathChanged(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="HasMaxFileSizeError"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="HasMaxFileSizeError"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnHasMaxFileSizeErrorChanging(bool value);
        /// <summary>Executes the logic for when <see cref="HasMaxFileSizeError"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="HasMaxFileSizeError"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnHasMaxFileSizeErrorChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="HasMaxFileSizeError"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="HasMaxFileSizeError"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnHasMaxFileSizeErrorChanged(bool value);
        /// <summary>Executes the logic for when <see cref="HasMaxFileSizeError"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="HasMaxFileSizeError"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnHasMaxFileSizeErrorChanged(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="HasParallelismError"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="HasParallelismError"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnHasParallelismErrorChanging(bool value);
        /// <summary>Executes the logic for when <see cref="HasParallelismError"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="HasParallelismError"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnHasParallelismErrorChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="HasParallelismError"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="HasParallelismError"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnHasParallelismErrorChanged(bool value);
        /// <summary>Executes the logic for when <see cref="HasParallelismError"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="HasParallelismError"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnHasParallelismErrorChanged(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="IsActiveStatusVisible"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="IsActiveStatusVisible"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnIsActiveStatusVisibleChanging(bool value);
        /// <summary>Executes the logic for when <see cref="IsActiveStatusVisible"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="IsActiveStatusVisible"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnIsActiveStatusVisibleChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="IsActiveStatusVisible"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="IsActiveStatusVisible"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnIsActiveStatusVisibleChanged(bool value);
        /// <summary>Executes the logic for when <see cref="IsActiveStatusVisible"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="IsActiveStatusVisible"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnIsActiveStatusVisibleChanged(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="ActiveStatusTitle"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ActiveStatusTitle"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnActiveStatusTitleChanging(string? value);
        /// <summary>Executes the logic for when <see cref="ActiveStatusTitle"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ActiveStatusTitle"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnActiveStatusTitleChanging(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="ActiveStatusTitle"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ActiveStatusTitle"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnActiveStatusTitleChanged(string? value);
        /// <summary>Executes the logic for when <see cref="ActiveStatusTitle"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ActiveStatusTitle"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnActiveStatusTitleChanged(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="ActiveStatusMessage"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ActiveStatusMessage"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnActiveStatusMessageChanging(string? value);
        /// <summary>Executes the logic for when <see cref="ActiveStatusMessage"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ActiveStatusMessage"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnActiveStatusMessageChanging(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="ActiveStatusMessage"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ActiveStatusMessage"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnActiveStatusMessageChanged(string? value);
        /// <summary>Executes the logic for when <see cref="ActiveStatusMessage"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ActiveStatusMessage"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnActiveStatusMessageChanged(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="ActiveStatusSeverity"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ActiveStatusSeverity"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnActiveStatusSeverityChanging(global::Microsoft.UI.Xaml.Controls.InfoBarSeverity value);
        /// <summary>Executes the logic for when <see cref="ActiveStatusSeverity"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ActiveStatusSeverity"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnActiveStatusSeverityChanging(global::Microsoft.UI.Xaml.Controls.InfoBarSeverity oldValue, global::Microsoft.UI.Xaml.Controls.InfoBarSeverity newValue);
        /// <summary>Executes the logic for when <see cref="ActiveStatusSeverity"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ActiveStatusSeverity"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnActiveStatusSeverityChanged(global::Microsoft.UI.Xaml.Controls.InfoBarSeverity value);
        /// <summary>Executes the logic for when <see cref="ActiveStatusSeverity"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ActiveStatusSeverity"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnActiveStatusSeverityChanged(global::Microsoft.UI.Xaml.Controls.InfoBarSeverity oldValue, global::Microsoft.UI.Xaml.Controls.InfoBarSeverity newValue);
        /// <summary>Executes the logic for when <see cref="IsDynamicStatusVisible"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="IsDynamicStatusVisible"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnIsDynamicStatusVisibleChanging(bool value);
        /// <summary>Executes the logic for when <see cref="IsDynamicStatusVisible"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="IsDynamicStatusVisible"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnIsDynamicStatusVisibleChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="IsDynamicStatusVisible"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="IsDynamicStatusVisible"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnIsDynamicStatusVisibleChanged(bool value);
        /// <summary>Executes the logic for when <see cref="IsDynamicStatusVisible"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="IsDynamicStatusVisible"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnIsDynamicStatusVisibleChanged(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="DynamicStatusTitle"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="DynamicStatusTitle"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnDynamicStatusTitleChanging(string? value);
        /// <summary>Executes the logic for when <see cref="DynamicStatusTitle"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="DynamicStatusTitle"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnDynamicStatusTitleChanging(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="DynamicStatusTitle"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="DynamicStatusTitle"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnDynamicStatusTitleChanged(string? value);
        /// <summary>Executes the logic for when <see cref="DynamicStatusTitle"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="DynamicStatusTitle"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnDynamicStatusTitleChanged(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="DynamicStatusMessage"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="DynamicStatusMessage"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnDynamicStatusMessageChanging(string? value);
        /// <summary>Executes the logic for when <see cref="DynamicStatusMessage"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="DynamicStatusMessage"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnDynamicStatusMessageChanging(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="DynamicStatusMessage"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="DynamicStatusMessage"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnDynamicStatusMessageChanged(string? value);
        /// <summary>Executes the logic for when <see cref="DynamicStatusMessage"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="DynamicStatusMessage"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnDynamicStatusMessageChanged(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="DynamicStatusSeverity"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="DynamicStatusSeverity"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnDynamicStatusSeverityChanging(global::Microsoft.UI.Xaml.Controls.InfoBarSeverity value);
        /// <summary>Executes the logic for when <see cref="DynamicStatusSeverity"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="DynamicStatusSeverity"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnDynamicStatusSeverityChanging(global::Microsoft.UI.Xaml.Controls.InfoBarSeverity oldValue, global::Microsoft.UI.Xaml.Controls.InfoBarSeverity newValue);
        /// <summary>Executes the logic for when <see cref="DynamicStatusSeverity"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="DynamicStatusSeverity"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnDynamicStatusSeverityChanged(global::Microsoft.UI.Xaml.Controls.InfoBarSeverity value);
        /// <summary>Executes the logic for when <see cref="DynamicStatusSeverity"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="DynamicStatusSeverity"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnDynamicStatusSeverityChanged(global::Microsoft.UI.Xaml.Controls.InfoBarSeverity oldValue, global::Microsoft.UI.Xaml.Controls.InfoBarSeverity newValue);
        /// <summary>Executes the logic for when <see cref="SelectedErrorFilter"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="SelectedErrorFilter"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnSelectedErrorFilterChanging(global::Veriado.WinUI.Models.Import.ImportErrorSeverity value);
        /// <summary>Executes the logic for when <see cref="SelectedErrorFilter"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="SelectedErrorFilter"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnSelectedErrorFilterChanging(global::Veriado.WinUI.Models.Import.ImportErrorSeverity oldValue, global::Veriado.WinUI.Models.Import.ImportErrorSeverity newValue);
        /// <summary>Executes the logic for when <see cref="SelectedErrorFilter"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="SelectedErrorFilter"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnSelectedErrorFilterChanged(global::Veriado.WinUI.Models.Import.ImportErrorSeverity value);
        /// <summary>Executes the logic for when <see cref="SelectedErrorFilter"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="SelectedErrorFilter"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnSelectedErrorFilterChanged(global::Veriado.WinUI.Models.Import.ImportErrorSeverity oldValue, global::Veriado.WinUI.Models.Import.ImportErrorSeverity newValue);
    }
}