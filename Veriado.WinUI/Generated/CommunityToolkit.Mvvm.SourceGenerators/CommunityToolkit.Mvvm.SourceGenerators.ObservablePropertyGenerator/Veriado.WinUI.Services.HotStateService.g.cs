// <auto-generated/>
#pragma warning disable
#nullable enable
namespace Veriado.WinUI.Services
{
    /// <inheritdoc/>
    partial class HotStateService
    {
        /// <inheritdoc cref="lastQuery"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public string? LastQuery
        {
            get => lastQuery;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(lastQuery, value))
                {
                    OnLastQueryChanging(value);
                    OnLastQueryChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.LastQuery);
                    lastQuery = value;
                    OnLastQueryChanged(value);
                    OnLastQueryChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.LastQuery);
                }
            }
        }

        /// <inheritdoc cref="lastFolder"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public string? LastFolder
        {
            get => lastFolder;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(lastFolder, value))
                {
                    OnLastFolderChanging(value);
                    OnLastFolderChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.LastFolder);
                    lastFolder = value;
                    OnLastFolderChanged(value);
                    OnLastFolderChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.LastFolder);
                }
            }
        }

        /// <inheritdoc cref="pageSize"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public int PageSize
        {
            get => pageSize;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(pageSize, value))
                {
                    OnPageSizeChanging(value);
                    OnPageSizeChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.PageSize);
                    pageSize = value;
                    OnPageSizeChanged(value);
                    OnPageSizeChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.PageSize);
                }
            }
        }

        /// <inheritdoc cref="importRecursive"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool ImportRecursive
        {
            get => importRecursive;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(importRecursive, value))
                {
                    OnImportRecursiveChanging(value);
                    OnImportRecursiveChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.ImportRecursive);
                    importRecursive = value;
                    OnImportRecursiveChanged(value);
                    OnImportRecursiveChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.ImportRecursive);
                }
            }
        }

        /// <inheritdoc cref="importKeepFsMetadata"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool ImportKeepFsMetadata
        {
            get => importKeepFsMetadata;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(importKeepFsMetadata, value))
                {
                    OnImportKeepFsMetadataChanging(value);
                    OnImportKeepFsMetadataChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.ImportKeepFsMetadata);
                    importKeepFsMetadata = value;
                    OnImportKeepFsMetadataChanged(value);
                    OnImportKeepFsMetadataChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.ImportKeepFsMetadata);
                }
            }
        }

        /// <inheritdoc cref="importSetReadOnly"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool ImportSetReadOnly
        {
            get => importSetReadOnly;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(importSetReadOnly, value))
                {
                    OnImportSetReadOnlyChanging(value);
                    OnImportSetReadOnlyChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.ImportSetReadOnly);
                    importSetReadOnly = value;
                    OnImportSetReadOnlyChanged(value);
                    OnImportSetReadOnlyChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.ImportSetReadOnly);
                }
            }
        }

        /// <inheritdoc cref="importUseParallel"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public bool ImportUseParallel
        {
            get => importUseParallel;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<bool>.Default.Equals(importUseParallel, value))
                {
                    OnImportUseParallelChanging(value);
                    OnImportUseParallelChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.ImportUseParallel);
                    importUseParallel = value;
                    OnImportUseParallelChanged(value);
                    OnImportUseParallelChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.ImportUseParallel);
                }
            }
        }

        /// <inheritdoc cref="importMaxDegreeOfParallelism"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public int ImportMaxDegreeOfParallelism
        {
            get => importMaxDegreeOfParallelism;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(importMaxDegreeOfParallelism, value))
                {
                    OnImportMaxDegreeOfParallelismChanging(value);
                    OnImportMaxDegreeOfParallelismChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.ImportMaxDegreeOfParallelism);
                    importMaxDegreeOfParallelism = value;
                    OnImportMaxDegreeOfParallelismChanged(value);
                    OnImportMaxDegreeOfParallelismChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.ImportMaxDegreeOfParallelism);
                }
            }
        }

        /// <inheritdoc cref="importDefaultAuthor"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public string? ImportDefaultAuthor
        {
            get => importDefaultAuthor;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(importDefaultAuthor, value))
                {
                    OnImportDefaultAuthorChanging(value);
                    OnImportDefaultAuthorChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.ImportDefaultAuthor);
                    importDefaultAuthor = value;
                    OnImportDefaultAuthorChanged(value);
                    OnImportDefaultAuthorChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.ImportDefaultAuthor);
                }
            }
        }

        /// <inheritdoc cref="importMaxFileSizeMegabytes"/>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public double? ImportMaxFileSizeMegabytes
        {
            get => importMaxFileSizeMegabytes;
            set
            {
                if (!global::System.Collections.Generic.EqualityComparer<double?>.Default.Equals(importMaxFileSizeMegabytes, value))
                {
                    OnImportMaxFileSizeMegabytesChanging(value);
                    OnImportMaxFileSizeMegabytesChanging(default, value);
                    OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.ImportMaxFileSizeMegabytes);
                    importMaxFileSizeMegabytes = value;
                    OnImportMaxFileSizeMegabytesChanged(value);
                    OnImportMaxFileSizeMegabytesChanged(default, value);
                    OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.ImportMaxFileSizeMegabytes);
                }
            }
        }

        /// <summary>Executes the logic for when <see cref="LastQuery"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="LastQuery"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnLastQueryChanging(string? value);
        /// <summary>Executes the logic for when <see cref="LastQuery"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="LastQuery"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnLastQueryChanging(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="LastQuery"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="LastQuery"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnLastQueryChanged(string? value);
        /// <summary>Executes the logic for when <see cref="LastQuery"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="LastQuery"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnLastQueryChanged(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="LastFolder"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="LastFolder"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnLastFolderChanging(string? value);
        /// <summary>Executes the logic for when <see cref="LastFolder"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="LastFolder"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnLastFolderChanging(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="LastFolder"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="LastFolder"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnLastFolderChanged(string? value);
        /// <summary>Executes the logic for when <see cref="LastFolder"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="LastFolder"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnLastFolderChanged(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="PageSize"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="PageSize"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnPageSizeChanging(int value);
        /// <summary>Executes the logic for when <see cref="PageSize"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="PageSize"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnPageSizeChanging(int oldValue, int newValue);
        /// <summary>Executes the logic for when <see cref="PageSize"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="PageSize"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnPageSizeChanged(int value);
        /// <summary>Executes the logic for when <see cref="PageSize"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="PageSize"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnPageSizeChanged(int oldValue, int newValue);
        /// <summary>Executes the logic for when <see cref="ImportRecursive"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ImportRecursive"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportRecursiveChanging(bool value);
        /// <summary>Executes the logic for when <see cref="ImportRecursive"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ImportRecursive"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportRecursiveChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="ImportRecursive"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ImportRecursive"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportRecursiveChanged(bool value);
        /// <summary>Executes the logic for when <see cref="ImportRecursive"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ImportRecursive"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportRecursiveChanged(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="ImportKeepFsMetadata"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ImportKeepFsMetadata"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportKeepFsMetadataChanging(bool value);
        /// <summary>Executes the logic for when <see cref="ImportKeepFsMetadata"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ImportKeepFsMetadata"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportKeepFsMetadataChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="ImportKeepFsMetadata"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ImportKeepFsMetadata"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportKeepFsMetadataChanged(bool value);
        /// <summary>Executes the logic for when <see cref="ImportKeepFsMetadata"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ImportKeepFsMetadata"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportKeepFsMetadataChanged(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="ImportSetReadOnly"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ImportSetReadOnly"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportSetReadOnlyChanging(bool value);
        /// <summary>Executes the logic for when <see cref="ImportSetReadOnly"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ImportSetReadOnly"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportSetReadOnlyChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="ImportSetReadOnly"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ImportSetReadOnly"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportSetReadOnlyChanged(bool value);
        /// <summary>Executes the logic for when <see cref="ImportSetReadOnly"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ImportSetReadOnly"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportSetReadOnlyChanged(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="ImportUseParallel"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ImportUseParallel"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportUseParallelChanging(bool value);
        /// <summary>Executes the logic for when <see cref="ImportUseParallel"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ImportUseParallel"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportUseParallelChanging(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="ImportUseParallel"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ImportUseParallel"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportUseParallelChanged(bool value);
        /// <summary>Executes the logic for when <see cref="ImportUseParallel"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ImportUseParallel"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportUseParallelChanged(bool oldValue, bool newValue);
        /// <summary>Executes the logic for when <see cref="ImportMaxDegreeOfParallelism"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ImportMaxDegreeOfParallelism"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportMaxDegreeOfParallelismChanging(int value);
        /// <summary>Executes the logic for when <see cref="ImportMaxDegreeOfParallelism"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ImportMaxDegreeOfParallelism"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportMaxDegreeOfParallelismChanging(int oldValue, int newValue);
        /// <summary>Executes the logic for when <see cref="ImportMaxDegreeOfParallelism"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ImportMaxDegreeOfParallelism"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportMaxDegreeOfParallelismChanged(int value);
        /// <summary>Executes the logic for when <see cref="ImportMaxDegreeOfParallelism"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ImportMaxDegreeOfParallelism"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportMaxDegreeOfParallelismChanged(int oldValue, int newValue);
        /// <summary>Executes the logic for when <see cref="ImportDefaultAuthor"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ImportDefaultAuthor"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportDefaultAuthorChanging(string? value);
        /// <summary>Executes the logic for when <see cref="ImportDefaultAuthor"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ImportDefaultAuthor"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportDefaultAuthorChanging(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="ImportDefaultAuthor"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ImportDefaultAuthor"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportDefaultAuthorChanged(string? value);
        /// <summary>Executes the logic for when <see cref="ImportDefaultAuthor"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ImportDefaultAuthor"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportDefaultAuthorChanged(string? oldValue, string? newValue);
        /// <summary>Executes the logic for when <see cref="ImportMaxFileSizeMegabytes"/> is changing.</summary>
        /// <param name="value">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ImportMaxFileSizeMegabytes"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportMaxFileSizeMegabytesChanging(double? value);
        /// <summary>Executes the logic for when <see cref="ImportMaxFileSizeMegabytes"/> is changing.</summary>
        /// <param name="oldValue">The previous property value that is being replaced.</param>
        /// <param name="newValue">The new property value being set.</param>
        /// <remarks>This method is invoked right before the value of <see cref="ImportMaxFileSizeMegabytes"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportMaxFileSizeMegabytesChanging(double? oldValue, double? newValue);
        /// <summary>Executes the logic for when <see cref="ImportMaxFileSizeMegabytes"/> just changed.</summary>
        /// <param name="value">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ImportMaxFileSizeMegabytes"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportMaxFileSizeMegabytesChanged(double? value);
        /// <summary>Executes the logic for when <see cref="ImportMaxFileSizeMegabytes"/> just changed.</summary>
        /// <param name="oldValue">The previous property value that was replaced.</param>
        /// <param name="newValue">The new property value that was set.</param>
        /// <remarks>This method is invoked right after the value of <see cref="ImportMaxFileSizeMegabytes"/> is changed.</remarks>
        [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator", "8.4.0.0")]
        partial void OnImportMaxFileSizeMegabytesChanged(double? oldValue, double? newValue);
    }
}