// <auto-generated />
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Veriado.Infrastructure.Persistence;

#nullable disable

namespace Veriado.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Veriado.Domain.FileSystem.FileSystemEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<int>("Attributes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("attributes");

                    b.Property<int>("ContentVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("content_version");

                    b.Property<string>("CreatedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_utc");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("hash");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_encrypted");

                    b.Property<bool>("IsMissing")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_missing");

                    b.Property<string>("LastAccessUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_access_utc");

                    b.Property<string>("LastLinkedUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_linked_utc");

                    b.Property<string>("LastWriteUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_write_utc");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("mime");

                    b.Property<string>("MissingSinceUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("missing_since_utc");

                    b.Property<string>("OwnerSid")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_sid");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.Property<int>("Provider")
                        .HasColumnType("INTEGER")
                        .HasColumnName("provider");

                    b.Property<long>("Size")
                        .HasColumnType("BIGINT")
                        .HasColumnName("size");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB")
                        .HasColumnName("row_version");

                    b.HasKey("Id");

                    b.HasIndex("Hash")
                        .HasDatabaseName("idx_filesystem_entities_hash");

                    b.HasIndex("Path")
                        .IsUnique()
                        .HasDatabaseName("ux_filesystem_entities_path");

                    b.ToTable("filesystem_entities", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Files.FileEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("author");

                    b.Property<int>("ContentRevision")
                        .HasColumnType("INTEGER")
                        .HasColumnName("content_revision");

                    b.Property<string>("CreatedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_utc");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT")
                        .HasColumnName("extension");

                    b.Property<byte[]>("FileSystemId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("filesystem_id");

                    b.Property<string>("FtsPolicy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("fts_policy");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_read_only");

                    b.Property<string>("LastModifiedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("mime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB")
                        .HasColumnName("row_version");

                    b.ComplexProperty<Dictionary<string, object>>("SystemMetadata", "Veriado.Domain.Files.FileEntity.SystemMetadata#FileSystemMetadata", b1 =>
                        {
                            b1.Property<uint?>("AlternateDataStreamCount")
                                .HasColumnType("INTEGER")
                                .HasColumnName("fs_ads");

                            b1.Property<int>("Attributes")
                                .HasColumnType("INTEGER")
                                .HasColumnName("fs_attr");

                            b1.Property<string>("CreatedUtc")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("fs_created_utc");

                            b1.Property<uint?>("HardLinkCount")
                                .HasColumnType("INTEGER")
                                .HasColumnName("fs_links");

                            b1.Property<string>("LastAccessUtc")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("fs_access_utc");

                            b1.Property<string>("LastWriteUtc")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("fs_write_utc");

                            b1.Property<string>("OwnerSid")
                                .HasMaxLength(256)
                                .HasColumnType("TEXT")
                                .HasColumnName("fs_owner_sid");
                        });

                    b.HasKey("Id");

                    b.HasIndex("FileSystemId")
                        .IsUnique()
                        .HasDatabaseName("ux_files_filesystem_id");

                    b.HasIndex("Mime")
                        .HasDatabaseName("idx_files_mime");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_files_name");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Search.DocumentLocationEntity", b =>
                {
                    b.Property<byte[]>("FileId")
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL")
                        .HasColumnName("lat");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL")
                        .HasColumnName("lon");

                    b.HasKey("FileId");

                    b.HasIndex("Latitude", "Longitude")
                        .HasDatabaseName("idx_document_locations_geo");

                    b.ToTable("document_locations", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Search.SearchFavoriteEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<string>("CreatedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_utc");

                    b.Property<string>("Match")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("match");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER")
                        .HasColumnName("position");

                    b.Property<string>("QueryText")
                        .HasColumnType("TEXT")
                        .HasColumnName("query_text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ux_search_favorites_name");

                    b.HasIndex("Position")
                        .HasDatabaseName("idx_search_favorites_position");

                    b.ToTable("search_favorites", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Search.SearchHistoryEntryEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<string>("CreatedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_utc");

                    b.Property<int>("Executions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1)
                        .HasColumnName("executions");

                    b.Property<int?>("LastTotalHits")
                        .HasColumnType("INTEGER")
                        .HasColumnName("last_total_hits");

                    b.Property<string>("Match")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("match");

                    b.Property<string>("QueryText")
                        .HasColumnType("TEXT")
                        .HasColumnName("query_text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUtc")
                        .IsDescending()
                        .HasDatabaseName("idx_search_history_created");

                    b.HasIndex("Match")
                        .HasDatabaseName("idx_search_history_match");

                    b.ToTable("search_history", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Search.SuggestionEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("en")
                        .HasColumnName("lang");

                    b.Property<string>("SourceField")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("source_field");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("term");

                    b.Property<double>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(1.0)
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("Language", "Term")
                        .HasDatabaseName("idx_suggestions_lookup");

                    b.HasIndex("Term", "Language", "SourceField")
                        .IsUnique()
                        .HasDatabaseName("ux_suggestions_term");

                    b.ToTable("suggestions", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Idempotency.Entities.IdempotencyKeyEntity", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<string>("CreatedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_utc");

                    b.HasKey("Key");

                    b.ToTable("idempotency_keys", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Persistence.Audit.FileAuditRecord", b =>
                {
                    b.Property<byte[]>("FileId")
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<string>("OccurredUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("occurred_utc");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("action");

                    b.Property<string>("Author")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("author");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Mime")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("mime");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("FileId", "OccurredUtc");

                    b.ToTable("audit_file", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Persistence.Audit.FileLinkAuditRecord", b =>
                {
                    b.Property<byte[]>("FileId")
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<string>("OccurredUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("occurred_utc");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("action");

                    b.Property<byte[]>("FileSystemId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("filesystem_id");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("hash");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("mime");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER")
                        .HasColumnName("size");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER")
                        .HasColumnName("version");

                    b.HasKey("FileId", "OccurredUtc");

                    b.ToTable("audit_file_link", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Persistence.Audit.FileSystemAuditRecord", b =>
                {
                    b.Property<byte[]>("FileSystemId")
                        .HasColumnType("BLOB")
                        .HasColumnName("filesystem_id");

                    b.Property<string>("OccurredUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("occurred_utc");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("action");

                    b.Property<int?>("Attributes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("attrs");

                    b.Property<string>("Hash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("hash");

                    b.Property<bool?>("IsEncrypted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_encrypted");

                    b.Property<string>("Mime")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("mime");

                    b.Property<string>("OwnerSid")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_sid");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.Property<long?>("Size")
                        .HasColumnType("INTEGER")
                        .HasColumnName("size");

                    b.HasKey("FileSystemId", "OccurredUtc");

                    b.ToTable("audit_filesystem", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Persistence.Entities.FileContentLinkRow", b =>
                {
                    b.Property<byte[]>("FileId")
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<int>("ContentVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("content_version");

                    b.Property<string>("ContentHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("content_hash");

                    b.Property<string>("CreatedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_utc");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT")
                        .HasColumnName("location");

                    b.Property<string>("Mime")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("mime");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("provider");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("BIGINT")
                        .HasColumnName("size_bytes");

                    b.HasKey("FileId", "ContentVersion");

                    b.HasIndex("ContentHash")
                        .HasDatabaseName("idx_file_content_link_hash");

                    b.ToTable("file_content_link", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Persistence.EventLog.DomainEventLogEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AggregateId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("aggregate_id");

                    b.Property<string>("EventJson")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("event_json");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("event_type");

                    b.Property<string>("OccurredUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("occurred_utc");

                    b.Property<string>("ProcessedUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("processed_utc");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("retry_count");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedUtc")
                        .HasDatabaseName("idx_domain_event_log_processed");

                    b.ToTable("domain_event_log", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Persistence.EventLog.ReindexQueueEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("EnqueuedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("enqueued_utc");

                    b.Property<byte[]>("FileId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<string>("ProcessedUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("processed_utc");

                    b.Property<int>("Reason")
                        .HasColumnType("INTEGER")
                        .HasColumnName("reason");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("retry_count");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedUtc")
                        .HasDatabaseName("idx_reindex_queue_unprocessed");

                    b.ToTable("reindex_queue", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Files.FileEntity", b =>
                {
                    b.HasOne("Veriado.Domain.FileSystem.FileSystemEntity", null)
                        .WithMany()
                        .HasForeignKey("FileSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_files_filesystem_entities_filesystem_id");

                    b.OwnsOne("Veriado.Domain.Files.FileContentLink", "Content", b1 =>
                        {
                            b1.Property<byte[]>("FileEntityId")
                                .HasColumnType("BLOB");

                            b1.Property<string>("ContentHash")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("TEXT")
                                .HasColumnName("content_hash");

                            b1.Property<string>("CreatedUtc")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("content_created_utc");

                            b1.Property<string>("Location")
                                .IsRequired()
                                .HasMaxLength(2048)
                                .HasColumnType("TEXT")
                                .HasColumnName("content_location");

                            b1.Property<string>("Mime")
                                .HasMaxLength(255)
                                .HasColumnType("TEXT")
                                .HasColumnName("content_mime");

                            b1.Property<string>("Provider")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("TEXT")
                                .HasColumnName("content_provider");

                            b1.Property<long>("Size")
                                .HasColumnType("BIGINT")
                                .HasColumnName("content_size");

                            b1.Property<int>("Version")
                                .HasColumnType("INTEGER")
                                .HasColumnName("content_version");

                            b1.HasKey("FileEntityId");

                            b1.ToTable("files");

                            b1.WithOwner()
                                .HasForeignKey("FileEntityId");
                        });

                    b.OwnsOne("Veriado.Domain.Search.SearchIndexState", "SearchIndex", b1 =>
                        {
                            b1.Property<byte[]>("FileEntityId")
                                .HasColumnType("BLOB");

                            b1.Property<string>("AnalyzerVersion")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(32)
                                .HasColumnType("TEXT")
                                .HasDefaultValue("v1")
                                .HasColumnName("fts_analyzer_version");

                            b1.Property<string>("IndexedContentHash")
                                .HasMaxLength(64)
                                .HasColumnType("TEXT")
                                .HasColumnName("fts_indexed_hash");

                            b1.Property<string>("IndexedTitle")
                                .HasMaxLength(300)
                                .HasColumnType("TEXT")
                                .HasColumnName("fts_indexed_title");

                            b1.Property<bool>("IsStale")
                                .HasColumnType("INTEGER")
                                .HasColumnName("fts_is_stale");

                            b1.Property<string>("LastIndexedUtc")
                                .HasColumnType("TEXT")
                                .HasColumnName("fts_last_indexed_utc");

                            b1.Property<int>("SchemaVersion")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER")
                                .HasDefaultValue(1)
                                .HasColumnName("fts_schema_version");

                            b1.Property<string>("TokenHash")
                                .HasMaxLength(64)
                                .HasColumnType("TEXT")
                                .HasColumnName("fts_token_hash");

                            b1.HasKey("FileEntityId");

                            b1.ToTable("files");

                            b1.WithOwner()
                                .HasForeignKey("FileEntityId");
                        });

                    b.OwnsOne("Veriado.Domain.Files.FileDocumentValidityEntity", "Validity", b1 =>
                        {
                            b1.Property<byte[]>("file_id")
                                .HasColumnType("BLOB")
                                .HasColumnName("file_id");

                            b1.Property<bool>("HasElectronicCopy")
                                .HasColumnType("INTEGER")
                                .HasColumnName("has_electronic");

                            b1.Property<bool>("HasPhysicalCopy")
                                .HasColumnType("INTEGER")
                                .HasColumnName("has_physical");

                            b1.Property<string>("IssuedAt")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("issued_at");

                            b1.Property<string>("ValidUntil")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("valid_until");

                            b1.HasKey("file_id");

                            b1.ToTable("files_validity", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("file_id");
                        });

                    b.Navigation("Content");

                    b.Navigation("SearchIndex")
                        .IsRequired();

                    b.Navigation("Validity");
                });

            modelBuilder.Entity("Veriado.Domain.Search.DocumentLocationEntity", b =>
                {
                    b.HasOne("Veriado.Domain.Files.FileEntity", null)
                        .WithOne()
                        .HasForeignKey("Veriado.Domain.Search.DocumentLocationEntity", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_document_locations_files_file_id");
                });

            modelBuilder.Entity("Veriado.Infrastructure.Persistence.Entities.FileContentLinkRow", b =>
                {
                    b.HasOne("Veriado.Domain.Files.FileEntity", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_file_content_link_files_file_id");

                    b.Navigation("File");
                });
#pragma warning restore 612, 618
        }
    }
}
