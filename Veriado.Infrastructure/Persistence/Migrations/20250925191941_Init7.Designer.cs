// <auto-generated />
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Veriado.Infrastructure.Persistence;

#nullable disable

namespace Veriado.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250925191941_Init7")]
    partial class Init7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Veriado.Domain.Audit.FileAuditEntity", b =>
                {
                    b.Property<byte[]>("FileId")
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<string>("OccurredUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("occurred_utc");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("action");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.HasKey("FileId", "OccurredUtc");

                    b.ToTable("audit_file", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Audit.FileContentAuditEntity", b =>
                {
                    b.Property<byte[]>("FileId")
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<string>("OccurredUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("occurred_utc");

                    b.Property<string>("NewHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("new_hash");

                    b.HasKey("FileId", "OccurredUtc");

                    b.ToTable("audit_file_content", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Audit.FileDocumentValidityAuditEntity", b =>
                {
                    b.Property<byte[]>("FileId")
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<string>("OccurredUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("occurred_utc");

                    b.Property<bool>("HasElectronicCopy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("has_electronic");

                    b.Property<bool>("HasPhysicalCopy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("has_physical");

                    b.Property<string>("IssuedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("issued_at");

                    b.Property<string>("ValidUntil")
                        .HasColumnType("TEXT")
                        .HasColumnName("valid_until");

                    b.HasKey("FileId", "OccurredUtc");

                    b.ToTable("audit_file_validity", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Files.FileEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("author");

                    b.Property<string>("CreatedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_utc");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT")
                        .HasColumnName("extension");

                    b.Property<string>("FtsPolicy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("fts_policy");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_read_only");

                    b.Property<string>("LastModifiedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("mime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER")
                        .HasColumnName("size_bytes");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER")
                        .HasColumnName("version");

                    b.ComplexProperty<Dictionary<string, object>>("SystemMetadata", "Veriado.Domain.Files.FileEntity.SystemMetadata#FileSystemMetadata", b1 =>
                        {
                            b1.Property<uint?>("AlternateDataStreamCount")
                                .HasColumnType("INTEGER")
                                .HasColumnName("fs_ads");

                            b1.Property<int>("Attributes")
                                .HasColumnType("INTEGER")
                                .HasColumnName("fs_attr");

                            b1.Property<string>("CreatedUtc")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("fs_created_utc");

                            b1.Property<uint?>("HardLinkCount")
                                .HasColumnType("INTEGER")
                                .HasColumnName("fs_links");

                            b1.Property<string>("LastAccessUtc")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("fs_access_utc");

                            b1.Property<string>("LastWriteUtc")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("fs_write_utc");

                            b1.Property<string>("OwnerSid")
                                .HasMaxLength(256)
                                .HasColumnType("TEXT")
                                .HasColumnName("fs_owner_sid");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Mime")
                        .HasDatabaseName("idx_files_mime");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_files_name");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Search.SearchFavoriteEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<string>("CreatedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_utc");

                    b.Property<bool>("IsFuzzy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_fuzzy");

                    b.Property<string>("Match")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("match");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER")
                        .HasColumnName("position");

                    b.Property<string>("QueryText")
                        .HasColumnType("TEXT")
                        .HasColumnName("query_text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ux_search_favorites_name");

                    b.HasIndex("Position")
                        .HasDatabaseName("idx_search_favorites_position");

                    b.ToTable("search_favorites", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Search.SearchHistoryEntryEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<string>("CreatedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_utc");

                    b.Property<int>("Executions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1)
                        .HasColumnName("executions");

                    b.Property<bool>("IsFuzzy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_fuzzy");

                    b.Property<int?>("LastTotalHits")
                        .HasColumnType("INTEGER")
                        .HasColumnName("last_total_hits");

                    b.Property<string>("Match")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("match");

                    b.Property<string>("QueryText")
                        .HasColumnType("TEXT")
                        .HasColumnName("query_text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUtc")
                        .IsDescending()
                        .HasDatabaseName("idx_search_history_created");

                    b.HasIndex("Match")
                        .HasDatabaseName("idx_search_history_match");

                    b.ToTable("search_history", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Idempotency.Entities.IdempotencyKeyEntity", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("key");

                    b.Property<string>("CreatedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_utc");

                    b.HasKey("Key");

                    b.ToTable("idempotency_keys", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.MetadataStore.Kv.ExtMetadataEntry", b =>
                {
                    b.Property<byte[]>("FileId")
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<byte[]>("FormatId")
                        .HasColumnType("BLOB")
                        .HasColumnName("fmtid");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pid");

                    b.Property<byte[]>("BinaryValue")
                        .HasColumnType("BLOB")
                        .HasColumnName("value_blob");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("kind");

                    b.Property<string>("TextValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("value_text");

                    b.HasKey("FileId", "FormatId", "PropertyId");

                    b.HasIndex("FileId")
                        .HasDatabaseName("idx_file_ext_metadata_file");

                    b.ToTable("file_ext_metadata", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Search.Outbox.OutboxEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("CreatedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_utc");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("payload");

                    b.Property<string>("ProcessedUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("processed_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedUtc")
                        .HasDatabaseName("idx_outbox_processed");

                    b.ToTable("outbox_events", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Files.FileEntity", b =>
                {
                    b.OwnsOne("Veriado.Domain.Search.SearchIndexState", "SearchIndex", b1 =>
                        {
                            b1.Property<byte[]>("FileEntityId")
                                .HasColumnType("BLOB");

                            b1.Property<string>("IndexedContentHash")
                                .HasMaxLength(64)
                                .HasColumnType("TEXT")
                                .HasColumnName("fts_indexed_hash");

                            b1.Property<string>("IndexedTitle")
                                .HasMaxLength(300)
                                .HasColumnType("TEXT")
                                .HasColumnName("fts_indexed_title");

                            b1.Property<bool>("IsStale")
                                .HasColumnType("INTEGER")
                                .HasColumnName("fts_is_stale");

                            b1.Property<string>("LastIndexedUtc")
                                .HasColumnType("TEXT")
                                .HasColumnName("fts_last_indexed_utc");

                            b1.Property<int>("SchemaVersion")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER")
                                .HasDefaultValue(1)
                                .HasColumnName("fts_schema_version");

                            b1.HasKey("FileEntityId");

                            b1.ToTable("files");

                            b1.WithOwner()
                                .HasForeignKey("FileEntityId");
                        });

                    b.OwnsOne("Veriado.Domain.Files.FileContentEntity", "Content", b1 =>
                        {
                            b1.Property<byte[]>("file_id")
                                .HasColumnType("BLOB")
                                .HasColumnName("file_id");

                            b1.Property<byte[]>("Bytes")
                                .IsRequired()
                                .HasColumnType("BLOB")
                                .HasColumnName("bytes");

                            b1.Property<string>("Hash")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("TEXT")
                                .HasColumnName("hash");

                            b1.HasKey("file_id");

                            b1.HasIndex("Hash")
                                .IsUnique()
                                .HasDatabaseName("ux_files_content_hash");

                            b1.ToTable("files_content", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("file_id");
                        });

                    b.OwnsOne("Veriado.Domain.Files.FileDocumentValidityEntity", "Validity", b1 =>
                        {
                            b1.Property<byte[]>("file_id")
                                .HasColumnType("BLOB")
                                .HasColumnName("file_id");

                            b1.Property<bool>("HasElectronicCopy")
                                .HasColumnType("INTEGER")
                                .HasColumnName("has_electronic");

                            b1.Property<bool>("HasPhysicalCopy")
                                .HasColumnType("INTEGER")
                                .HasColumnName("has_physical");

                            b1.Property<string>("IssuedAt")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("issued_at");

                            b1.Property<string>("ValidUntil")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("valid_until");

                            b1.HasKey("file_id");

                            b1.ToTable("files_validity", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("file_id");
                        });

                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("SearchIndex")
                        .IsRequired();

                    b.Navigation("Validity");
                });
#pragma warning restore 612, 618
        }
    }
}
