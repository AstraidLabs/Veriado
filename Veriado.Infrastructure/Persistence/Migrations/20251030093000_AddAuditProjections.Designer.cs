// <auto-generated />
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Veriado.Infrastructure.Persistence;

#nullable disable

namespace Veriado.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251030093000_AddAuditProjections")]
    partial class AddAuditProjections
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Veriado.Domain.Audit.FileAuditEntity", b =>
                {
                    b.Property<byte[]>("FileId")
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<string>("OccurredUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("occurred_utc");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("action");

                    b.Property<string>("Author")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("author");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Mime")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("mime");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("FileId", "OccurredUtc");

                    b.ToTable("audit_file", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Audit.FileLinkAuditEntity", b =>
                {
                    b.Property<byte[]>("FileId")
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<string>("OccurredUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("occurred_utc");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("action");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("hash");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("mime");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER")
                        .HasColumnName("size");

                    b.Property<byte[]>("FileSystemId")
                        .HasColumnType("BLOB")
                        .HasColumnName("filesystem_id");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER")
                        .HasColumnName("version");

                    b.HasKey("FileId", "OccurredUtc");

                    b.ToTable("audit_file_link", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Audit.FileSystemAuditEntity", b =>
                {
                    b.Property<byte[]>("FileSystemId")
                        .HasColumnType("BLOB")
                        .HasColumnName("filesystem_id");

                    b.Property<string>("OccurredUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("occurred_utc");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("action");

                    b.Property<int?>("Attributes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("attrs");

                    b.Property<string>("Hash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("hash");

                    b.Property<bool?>("IsEncrypted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_encrypted");

                    b.Property<string>("Mime")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("mime");

                    b.Property<string>("OwnerSid")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("owner_sid");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.Property<long?>("Size")
                        .HasColumnType("INTEGER")
                        .HasColumnName("size");

                    b.HasKey("FileSystemId", "OccurredUtc");

                    b.ToTable("audit_filesystem", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Files.FileEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("author");

                    b.Property<byte[]>("FileSystemId")
                        .HasColumnType("BLOB")
                        .HasColumnName("file_system_id");

                    b.Property<string>("ContentHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("content_hash");

                    b.Property<int>("LinkedContentVersion")
                        .HasColumnType("INTEGER")
                        .HasColumnName("content_version");

                    b.Property<string>("CreatedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_utc");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT")
                        .HasColumnName("extension");

                    b.Property<string>("FtsPolicy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("fts_policy");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_read_only");

                    b.Property<string>("LastModifiedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("mime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER")
                        .HasColumnName("size_bytes");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Persistence.EventLog.DomainEventLogEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AggregateId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("aggregate_id");

                    b.Property<string>("EventJson")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("event_json");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("event_type");

                    b.Property<string>("OccurredUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("occurred_utc");

                    b.HasKey("Id");

                    b.ToTable("domain_event_log", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Persistence.EventLog.ReindexQueueEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<byte[]>("FileId")
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<string>("EnqueuedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("enqueued_utc");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("reason");

                    b.HasKey("Id");

                    b.ToTable("reindex_queue", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
