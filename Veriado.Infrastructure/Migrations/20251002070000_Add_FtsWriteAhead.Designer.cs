// <auto-generated />
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Veriado.Infrastructure.Persistence;

#nullable disable

namespace Veriado.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251002070000_Add_FtsWriteAhead")]
    partial class Add_FtsWriteAhead
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Veriado.Domain.Audit.FileAuditEntity", b =>
                {
                    b.Property<byte[]>("FileId")
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<string>("OccurredUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("occurred_utc");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("action");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("User")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("user");

                    b.HasKey("FileId", "OccurredUtc");

                    b.ToTable("audit_file", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Audit.FileContentAuditEntity", b =>
                {
                    b.Property<byte[]>("FileId")
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<string>("OccurredUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("occurred_utc");

                    b.Property<string>("Hash")
                        .HasColumnType("TEXT")
                        .HasColumnName("hash");

                    b.Property<long>("Length")
                        .HasColumnType("INTEGER")
                        .HasColumnName("length");

                    b.HasKey("FileId", "OccurredUtc");

                    b.ToTable("audit_file_content", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Audit.FileDocumentValidityAuditEntity", b =>
                {
                    b.Property<byte[]>("FileId")
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<string>("OccurredUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("occurred_utc");

                    b.Property<int>("DocumentState")
                        .HasColumnType("INTEGER")
                        .HasColumnName("document_state");

                    b.Property<string>("Error")
                        .HasColumnType("TEXT")
                        .HasColumnName("error");

                    b.HasKey("FileId", "OccurredUtc");

                    b.ToTable("audit_file_document_validity", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Audit.FileEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("category");

                    b.Property<string>("OccurredUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("occurred_utc");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("payload");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Files.DocumentLocationEntity", b =>
                {
                    b.Property<byte[]>("FileId")
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<double>("Lat")
                        .HasColumnType("REAL")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("REAL")
                        .HasColumnName("lon");

                    b.HasKey("FileId");

                    b.HasIndex("Lat", "Lon")
                        .HasDatabaseName("idx_document_locations_geo");

                    b.ToTable("document_locations", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Files.FileEntity", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BLOB")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("author");

                    b.Property<int>("Classification")
                        .HasColumnType("INTEGER")
                        .HasColumnName("classification");

                    b.Property<string>("CreatedUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_utc");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT")
                        .HasColumnName("extension");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("size");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("mime");

                    b.Property<string>("ModifiedUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("MimeType")
                        .HasDatabaseName("idx_files_mime");

                    b.HasIndex("Name")
                        .HasDatabaseName("ux_files_name");

                    b.HasIndex("Version")
                        .HasDatabaseName("idx_files_version");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Files.FileFavorite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<byte[]>("FileId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("user");

                    b.HasKey("Id");

                    b.HasIndex("User", "FileId")
                        .IsUnique()
                        .HasDatabaseName("ux_search_favorites_user_file");

                    b.ToTable("search_favorites", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Files.FileLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<byte[]>("FileId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.Property<string>("Root")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("root");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .HasDatabaseName("idx_document_locations_file");

                    b.ToTable("document_locations_legacy", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Files.FileNameHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<byte[]>("FileId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("RenamedUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("renamed_utc");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .HasDatabaseName("idx_file_name_history_file");

                    b.ToTable("file_name_history", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Persistence.WriteAhead.FtsWriteAheadDeadLetterRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ContentHash")
                        .HasColumnType("TEXT")
                        .HasColumnName("content_hash");

                    b.Property<string>("DeadLetteredUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("dead_lettered_utc");

                    b.Property<string>("EnqueuedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("enqueued_utc");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("error");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("file_id");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("op");

                    b.Property<long>("OriginalId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("original_id");

                    b.Property<string>("TitleHash")
                        .HasColumnType("TEXT")
                        .HasColumnName("title_hash");

                    b.HasKey("Id");

                    b.HasIndex("DeadLetteredUtc")
                        .HasDatabaseName("idx_fts_write_ahead_dlq_dead_lettered");

                    b.ToTable("fts_write_ahead_dlq", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Persistence.WriteAhead.FtsWriteAheadRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ContentHash")
                        .HasColumnType("TEXT")
                        .HasColumnName("content_hash");

                    b.Property<string>("EnqueuedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("enqueued_utc");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("file_id");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("op");

                    b.Property<string>("TitleHash")
                        .HasColumnType("TEXT")
                        .HasColumnName("title_hash");

                    b.HasKey("Id");

                    b.HasIndex("EnqueuedUtc")
                        .HasDatabaseName("idx_fts_write_ahead_enqueued");

                    b.ToTable("fts_write_ahead", (string)null);
                });

            modelBuilder.Entity("Veriado.Domain.Search.SearchHistoryEntryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("query");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("user");

                    b.Property<string>("ViewedUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("viewed_utc");

                    b.HasKey("Id");

                    b.HasIndex("User", "ViewedUtc")
                        .HasDatabaseName("idx_search_history_user");

                    b.ToTable("search_history", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Search.Outbox.OutboxDeadLetterEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("Attempts")
                        .HasColumnType("INTEGER")
                        .HasColumnName("attempts");

                    b.Property<string>("CreatedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_utc");

                    b.Property<string>("DeadLetteredUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("dead_lettered_utc");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("error");

                    b.Property<long>("OutboxId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("outbox_id");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("payload");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("DeadLetteredUtc")
                        .HasDatabaseName("idx_outbox_dlq_dead_lettered");

                    b.ToTable("outbox_dlq", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Search.Outbox.OutboxEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("Attempts")
                        .HasColumnType("INTEGER")
                        .HasColumnName("attempts");

                    b.Property<string>("CreatedUtc")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_utc");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("payload");

                    b.Property<string>("ProcessedUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("processed_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedUtc")
                        .HasDatabaseName("idx_outbox_processed");

                    b.ToTable("outbox_events", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Search.SearchFavoriteEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<byte[]>("FileId")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("file_id");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("user");

                    b.HasKey("Id");

                    b.HasIndex("User", "FileId")
                        .IsUnique()
                        .HasDatabaseName("ux_search_favorites_user_file");

                    b.ToTable("search_favorites", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Search.SearchHistoryEntryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("query");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("user");

                    b.Property<string>("ViewedUtc")
                        .HasColumnType("TEXT")
                        .HasColumnName("viewed_utc");

                    b.HasKey("Id");

                    b.HasIndex("User", "ViewedUtc")
                        .HasDatabaseName("idx_search_history_user");

                    b.ToTable("search_history", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Search.SuggestionEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT")
                        .HasColumnName("lang");

                    b.Property<double>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("REAL")
                        .HasDefaultValue(1.0)
                        .HasColumnName("weight");

                    b.Property<string>("SourceField")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("source_field");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("term");

                    b.HasKey("Id");

                    b.HasIndex("Lang", "Term")
                        .HasDatabaseName("idx_suggestions_lookup");

                    b.HasIndex("Term", "Lang", "SourceField")
                        .IsUnique()
                        .HasDatabaseName("ux_suggestions_term");

                    b.ToTable("suggestions", (string)null);
                });

            modelBuilder.Entity("Veriado.Infrastructure.Search.SynonymEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT")
                        .HasColumnName("lang");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("term");

                    b.Property<string>("Variant")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnName("variant");

                    b.HasKey("Id");

                    b.HasIndex("Lang", "Term")
                        .HasDatabaseName("idx_synonyms_term");

                    b.ToTable("synonyms", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
